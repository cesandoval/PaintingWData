extends layout

append content
    script(type='text/javascript', src="/javascripts/libs/OrbitControls.js")

    script.
        var datavoxelId = #{datavoxelId};
    div.mainWindow
        div#react

    link(rel="stylesheet", href="/stylesheets/app.css")
    link(rel="stylesheet", href="/stylesheets/d3.parcoords.css")

    script(src="/javascripts/js/bootstrap-slider.js")

    script(id="vertexShader", type="x-shader/x-vertex").
        precision mediump float;

        uniform mat4 modelViewMatrix;
        uniform mat4 projectionMatrix;
        uniform mat3 rotate;
        uniform float show;
        uniform float min;
        uniform float max;

        attribute vec3 position;
        attribute vec3 normal;
        attribute vec3 translation;

        attribute float size;

        varying vec4 vTest;
        varying vec3 vNormal;
        varying float vSize;

        void main() {

            vNormal = normal;
            vTest = vec4(position, 1.0);

            float nshow = show;
            if (!(size > min && size < max)) { nshow = 0.0; }

            vSize = size;

            vec3 positionRotate = rotate * position;

            vec3 newPosition = (positionRotate * (size * nshow)) + translation;

            gl_Position = projectionMatrix *
                          modelViewMatrix *
                          vec4(newPosition,1.0);
        }

    script(id="fragmentShader", type="x-shader/x-fragment").
        precision lowp float;

        uniform float amplitude;
        uniform vec3 startColor;
        uniform vec3 endColor;
        uniform float transparency;

        varying vec3 vNormal;
        varying vec4 vTest;
        varying float vSize;


        void main() {
        vec3 light = vec3(0.5,0.2,1.0);
        light = normalize(light);

        float vProd = max(0.0, dot(vNormal, light));

        vec3 modColor = vec3(0.0, 0.0, 0.0);
        modColor.x = ((endColor.x - startColor.x) * (vSize*300.0)) + startColor.x;
        modColor.y = ((endColor.y - startColor.y) * (vSize*300.0)) + startColor.y;
        modColor.z = ((endColor.z - startColor.z) * (vSize*300.0)) + startColor.z;
        gl_FragColor = vec4(modColor, transparency);

        }

    script.
        var mySlider = $("input.slider").bootstrapSlider();
        var value = mySlider.bootstrapSlider('getValue');

    script(src='/javascripts/js/three.js')
    //- script(src='/javascripts/js/OrbitControls.js')
    script(src='/javascripts/js/d3.js')
    script(src='/javascripts/js/d3.parcoords.js')
    script(src='/javascripts/bundle.js')
    script(src='/javascripts/queryButton.js')
    script(src='/javascripts/libs/OrbitControls.js')